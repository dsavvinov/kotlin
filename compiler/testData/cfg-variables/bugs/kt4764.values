== sample ==
fun sample(): String? {
    try {
        if (false) {
            return "fail"
        } else {
            if (false) {
                if (false) {
                    var foo: String? = null
                    try {
                        foo = "test"
                    } catch (e: Exception) {
                        return "fail"
                    } finally {
                        println(foo) // Variable 'foo' must be initialized
                    }
                }
                return "fail"
            }
        }
    } finally {}
    return null
}
---------------------
                                                                                                                                                                                                                                                                          <v8>: {<: Exception /* = Exception */}   NEW: magic[FAKE_INITIALIZER](e: Exception) -> <v8>
false                                                                                                                                                                                                                                                                     <v0>: Boolean                            NEW: r(false) -> <v0>
"fail"                                                                                                                                                                                                                                                                    <v1>: {<: String?}                       NEW: r("fail") -> <v1>
return "fail"                                                                                                                                                                                                                                                             !<v2>: *
{ return "fail" }                                                                                                                                                                                                                                                         !<v2>: *                                 COPY
false                                                                                                                                                                                                                                                                     <v3>: Boolean                            NEW: r(false) -> <v3>
false                                                                                                                                                                                                                                                                     <v4>: Boolean                            NEW: r(false) -> <v4>
null                                                                                                                                                                                                                                                                      <v5>: {<: String?}                       NEW: r(null) -> <v5>
"test"                                                                                                                                                                                                                                                                    <v6>: {<: String?}                       NEW: r("test") -> <v6>
foo = "test"                                                                                                                                                                                                                                                              !<v7>: *
{ foo = "test" }                                                                                                                                                                                                                                                          !<v7>: *                                 COPY
"fail"                                                                                                                                                                                                                                                                    <v9>: {<: String?}                       NEW: r("fail") -> <v9>
return "fail"                                                                                                                                                                                                                                                             !<v12>: *
{ return "fail" }                                                                                                                                                                                                                                                         !<v12>: *                                COPY
foo                                                                                                                                                                                                                                                                       <v10>: *                                 NEW: r(foo) -> <v10>
println(foo)                                                                                                                                                                                                                                                              <v11>: *                                 NEW: call(println(foo), println|<v10>) -> <v11>
{ println(foo) // Variable 'foo' must be initialized }                                                                                                                                                                                                                    <v11>: *                                 COPY
try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized }                                                                                                                                                <v13>: *                                 NEW: merge(try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized }|!<v7>, !<v12>) -> <v13>
{ var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } }                                                                                                                    <v13>: *                                 COPY
if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } }                                                                                                         <v14>: *                                 NEW: merge(if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } }|<v13>) -> <v14>
"fail"                                                                                                                                                                                                                                                                    <v15>: {<: String?}                      NEW: r("fail") -> <v15>
return "fail"                                                                                                                                                                                                                                                             !<v16>: *
{ if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" }                                                                                       !<v16>: *                                COPY
if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" }                                                                            <v17>: *                                 NEW: merge(if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" }|!<v16>) -> <v17>
{ if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" } }                                                                        <v17>: *                                 COPY
if (false) { return "fail" } else { if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" } }                                      <v18>: *                                 NEW: merge(if (false) { return "fail" } else { if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" } }|!<v2>, <v17>) -> <v18>
{ if (false) { return "fail" } else { if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" } } }                                  <v18>: *                                 COPY
try { if (false) { return "fail" } else { if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" } } } finally {}                   <v19>: *                                 NEW: merge(try { if (false) { return "fail" } else { if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" } } } finally {}|<v18>) -> <v19>
null                                                                                                                                                                                                                                                                      <v20>: {<: String?}                      NEW: r(null) -> <v20>
return null                                                                                                                                                                                                                                                               !<v21>: *
{ try { if (false) { return "fail" } else { if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" } } } finally {} return null }   !<v21>: *                                COPY
=====================
