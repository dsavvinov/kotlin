== f ==
fun f() {
    var foo = 1
    try {
        foo = 2
        throw RuntimeException()
    } catch (e: Throwable) {
        println(foo)
    }
}
---------------------
                                                                                                 <v4>: {<: Throwable}   NEW: magic[FAKE_INITIALIZER](e: Throwable) -> <v4>
1                                                                                                <v0>: Int              NEW: r(1) -> <v0>
2                                                                                                <v1>: Int              NEW: r(2) -> <v1>
RuntimeException()                                                                               <v2>: {<: Throwable}   NEW: call(RuntimeException(), <init>) -> <v2>
throw RuntimeException()                                                                         !<v3>: *
{ foo = 2 throw RuntimeException() }                                                             !<v3>: *               COPY
foo                                                                                              <v5>: Int              NEW: r(foo) -> <v5>
println(foo)                                                                                     <v6>: *                NEW: call(println(foo), println|<v5>) -> <v6>
{ println(foo) }                                                                                 <v6>: *                COPY
try { foo = 2 throw RuntimeException() } catch (e: Throwable) { println(foo) }                   <v7>: *                NEW: merge(try { foo = 2 throw RuntimeException() } catch (e: Throwable) { println(foo) }|!<v3>, <v6>) -> <v7>
{ var foo = 1 try { foo = 2 throw RuntimeException() } catch (e: Throwable) { println(foo) } }   <v7>: *                COPY
=====================
