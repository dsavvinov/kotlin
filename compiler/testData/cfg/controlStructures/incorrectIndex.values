== s ==
val s = mutableListOf<String>()
---------------------
mutableListOf<String>()   <v0>: {<: MutableList<String>}   NEW: call(mutableListOf<String>(), mutableListOf) -> <v0>
=====================
== test ==
fun test(name: String?, flag: Boolean): Boolean {
    try {
        name?.let {
            if (flag) {
                s.add(it)
            }
            else {
                s.remove(it)
            }

            return true
        }

        return false
    } finally {
        name?.hashCode()
    }
}
---------------------
                                                                                                                                <v0>: {<: String?}               NEW: magic[FAKE_INITIALIZER](name: String?) -> <v0>
                                                                                                                                <v1>: Boolean                    NEW: magic[FAKE_INITIALIZER](flag: Boolean) -> <v1>
name                                                                                                                            <v2>: String                     NEW: r(name) -> <v2>
{ if (flag) { s.add(it) } else { s.remove(it) } return true }                                                                   <v3>: {<: (String) -> Nothing}   NEW: r({ if (flag) { s.add(it) } else { s.remove(it) } return true }) -> <v3>
let { if (flag) { s.add(it) } else { s.remove(it) } return true }                                                               !<v4>: *
name?.let { if (flag) { s.add(it) } else { s.remove(it) } return true }                                                         !<v4>: *                         COPY
false                                                                                                                           <v5>: Boolean                    NEW: r(false) -> <v5>
return false                                                                                                                    !<v6>: *
{ name?.let { if (flag) { s.add(it) } else { s.remove(it) } return true } return false }                                        !<v6>: *                         COPY
try { name?.let { if (flag) { s.add(it) } else { s.remove(it) } return true } return false } finally { name?.hashCode() }       <v7>: *                          NEW: merge(try { name?.let { if (flag) { s.add(it) } else { s.remove(it) } return true } return false } finally { name?.hashCode() }|!<v6>) -> <v7>
{ try { name?.let { if (flag) { s.add(it) } else { s.remove(it) } return true } return false } finally { name?.hashCode() } }   <v7>: *                          COPY
=====================
== anonymous_0 ==
{
            if (flag) {
                s.add(it)
            }
            else {
                s.remove(it)
            }

            return true
        }
---------------------
flag                                                        <v0>: Boolean                          NEW: r(flag) -> <v0>
s                                                           <v1>: {<: MutableCollection<String>}   NEW: r(s) -> <v1>
it                                                          <v2>: String                           NEW: r(it) -> <v2>
add(it)                                                     <v3>: *                                NEW: call(add(it), add|<v1>, <v2>) -> <v3>
s.add(it)                                                   <v3>: *                                COPY
{ s.add(it) }                                               <v3>: *                                COPY
s                                                           <v4>: {<: MutableCollection<String>}   NEW: r(s) -> <v4>
it                                                          <v5>: String                           NEW: r(it) -> <v5>
remove(it)                                                  <v6>: *                                NEW: call(remove(it), remove|<v4>, <v5>) -> <v6>
s.remove(it)                                                <v6>: *                                COPY
{ s.remove(it) }                                            <v6>: *                                COPY
if (flag) { s.add(it) } else { s.remove(it) }               <v7>: *                                NEW: merge(if (flag) { s.add(it) } else { s.remove(it) }|<v3>, <v6>) -> <v7>
true                                                        <v8>: Boolean                          NEW: r(true) -> <v8>
return true                                                 !<v11>: *
if (flag) { s.add(it) } else { s.remove(it) } return true   !<v11>: *                              COPY
=====================
